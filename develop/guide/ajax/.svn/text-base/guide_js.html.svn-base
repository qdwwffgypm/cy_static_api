<h2><strong>J<small>ava</small>S<small>cript</small></strong>代码规范</h2>
<ul class="items">
	<li>
		<h3>框架模块</h3>
		<ol>
			<li>基于base.js开发；</li>
			<li>模块化的开发时，相应的变量和方法都放在闭包里，避免成为全局变量和方法，和其他JS处理造成命名上的冲突。 如果有需要公开为全局变量或方法的，则命名时用window.varName来定义。</li>
			<li>
				对于需要及时改变当前页面内容和表现的JS处理，DOM渲染结束后立即执行（DOMContentLoaded事件）。<br/>
				影响页面渲染或性能的插件，尽量采用AMD规范方式加载；在页面内容渲染结束后引进与执行。
			</li>
		</ol>
	</li>
	<li>
		<h3>编码风格</h3>
		<ol>
			<li>
				<h4>代码注释</h4>
				<p>
					不要吝啬注释。注释应该和它们所注释的代码一样是书写良好且清晰明了，避免冗长或者情绪化。代码修改时，要及时更新注释。<br/>
					使用单行注释，放在相应代码上方。块注释用于注释正式文档和无用代码。<br/>
					不要使用IE下的条件注释，避免使用行末注释。
				</p>
			</li>
			<li>
				<h4>代码美化</h4>
				<dl class="dl-w50">
					<dt><em>缩进</em></dt>
					<dd>同个文件中只能使用空格或Tab一种缩进形式，建议使用四个空格来缩进。</dd>
					<dt><em>折行</em></dt>
					<dd>避免每行超过80个字符。当一条语句一行写不下时，请考虑折行。折行时，请在运算符号（如加号“+”、点号“.”）后换行。</dd>
					<dt><em>空行</em></dt>
					<dd>用空行来将逻辑相关的代码块分割开可以提高程序的可读性</dd>
					<dt><em>空格</em></dt>
					<dd>
						适当的使用空格对不同的代码元素进行分割，以增加代码的可读性：<br/>
						<p class="bddc bgffe">
							每个,(逗号)后应跟一个空格。<br/>
							每个在控制部分,比如for 语句中的; (分号)后须跟一个空格。<br/>
							函数参数与((左括号)之间不应该有空格。这能帮助区分关键字和函数调用。<br/>
							跟在((左括号)后面的关键字应被一个空格隔开。<br/>					
							函数后不添加空格，参数与括号间无空格，<br/>
							数组成员间的","后面需要跟空格<br/>
							对象字面量中冒号后有空格<br/>
							 "="前后需要跟空格<br/>
							用来包含语句的"()"前后需要跟空格，诸如： if / for / while / switch ( statements ) { … } 等
						</p>
					</dd>
				</dl>
			</li>
			<li>
				<h4>代码格式化</h4>
				<dl class="dl-w50">
					<dt><em>逗号</em></dt>
					<dd>避免额外的逗号，尤其是数组和JSON对象之中。如：var arr = [1,2,3,];</dd>
					<dt><em>分号</em></dt>
					<dd>
						总是使用分号<br/>
						<p class="bddc bgffe">
							语句必须都以分号结尾，除了for, if, else, while,switch, try, catch, finally之外。<br/>
							特别需要注意的是给变量赋值为function类型或者object时请注意在大括号之后加上分号；
						</p>
					</dd>
					<dt><em>引号</em></dt>
					<dd>单引号 (') 优于双引号 (")，尽量使用单引号来定义字符串</dd>
					<dt><em>括号</em></dt>
					<dd>不要滥用括号, 只在必要的时候使用它.</dd>
					<dt><em>大括号</em></dt>
					<dd>分号会被隐式插入到代码中, 所以你务必在同一行上插入大括号. 所有的循环体和判断体都需要用"{}"括起来。</dd>
				</dl>
				<dl class="dl-w150">
					<dt><em>二元和三元操作符</em></dt>
					<dd>操作符始终跟随着前行</dd>
					<dt><em>数组和对象的初始化</em></dt>
					<dd>如果初始值不是很长, 就保持写在单行上；初始值占用多行时, 请使用缩进；比较长的标识符或者数值, 不要为了让代码好看些而手工对齐</dd>
				</dl>
			</li>
		</ol>
	</li>
	<li>
		<h3>语言规范</h3>
		<ol>
			<li>
				<h4>命名</h4>
				<p class="bddc bgffe">大多数的变量名和方法命应以小写字母开头。</p>
				<dl class="dl-w50">
					<dt><em>常量</em></dt>
					<dd>常量名全部大写，单词间用下划线分隔。如：“CSS_BTN_CLOSE”, "TXT_LOADING"</dd>
					<dt><em>变量</em></dt>
					<dd>
						变量声明应放在函数的首部，同时必须加上 var 关键字。<br/>
						变量名应由26个大小写字母(A..Z,a..z),10个数字(0..9),和_(下划线)组成。<br/>
						<dl>
							<dt><u>全局变量</u></dt>
							<dd>全局变量尽量使用大写；同时应尽量减少全局变量的使用。不要让局部变量覆盖全局变量。</dd>
							<dt><u>私有变量</u></dt>
							<dd>私有变量名用下划线开头。如："_current", "_defaultConfig"</dd>
							<dt><u>名称前缀</u></dt>
							<dd>布尔值变量前缀： is、be、has、can； 数字变量前缀： num</dd>
						</dl>
					</dd>
					<dt><em>对象</em></dt>
					<dd>
						对象的名称，属性以及相应方法名，采用小驼峰式(小写字母开头)命名规则，如"init", "bindEvent", "updatePosition"。 <br/>
						私有属性和方法名(不公开对外使用的方法)，用下划线开头。
					</dd>
					<dt><em>类库</em></dt>
					<dd>类（构造器）名的的首字母大写，类名由多个单词组成是，使用大驼峰式(大写字母开头)命名规则，例如：EventHandler</dd>
				</dl>
			</li>
			<li>
				<h4>语句</h4>
				<p>每一行最多只包含一条语句。把;(分号)放到每条简单语句的结尾处。</p>
				<dl>
					<dt><em>if语句</em></dt>
					<dd>避免在if语句的条件部分进行赋值。</dd>
					<dt><em>for语句</em></dt>
					<dd>重复变量建议使用 “i”, “j”, “k” （依次类推）等名称的变量；</dd>
					<dt><em>for-in</em></dt>
					<dd>只用于 object/map/hash 的遍历。必要时，for-in循环体中使用hasOwnProperty方法检查成员是否为自身成员，避免来自原型链上的污染。</dd>
					<dt><em>while语句</em></dt>
					<dd>避免在while语句的条件部分进行赋值。</dd>
					<dt><em>new语句</em></dt>
					<dd>避免使用new来构造： new Number、new String、new Boolean、new Object（用{}代替）、new Array（用[]代替）</dd>
					<dt><em>return</em></dt>
					<dd>一条有返回值的return语句不要使用( )(括号)来括住返回值。如果返回表达式,则表达式应与return 关键字在同一行,以避免误加分号错误。</dd>
					<dt><em>continue</em></dt>
					<dd>尽量避免使用</dd>
					<dt><em>with语句</em></dt>
					<dd>不要使用</dd>
				</dl>
			</li>
			
		</ol>
	</li>
	<li>
		<h3>性能优化</h3>
		<ol>
			<li>
				<h4>JS资源文件合并与压缩</h4>
				<p>将前端文件合并与压缩在减少请求加快下载速度的同时也减少服务器压力；</p>
			</li>
			<li>
				<h4>不经常变动的资源|类库添加缓存(包括本地缓存);</h4>
				<p>可将不经常变动的资源|类库放到单独的服务器方便添加缓存；</p>
			</li>
			<li>
				<h4>按需加载资源文件;</h4>
				<p>影响页面渲染或性能的载资可采用异步方式加载；</p>
			</li>
		</ol>
	</li>
</ul>